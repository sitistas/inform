#Package types:
packagetype _plain
packagetype _code
packagetype _linkage
#Origins:
#Pragmas:
#Primitives:
primitive !plus val val -> val
primitive !minus val val -> val
primitive !unaryminus val -> val
primitive !times val val -> val
primitive !divide val val -> val
primitive !modulo val val -> val
primitive !bitwiseand val val -> val
primitive !bitwiseor val val -> val
primitive !bitwisenot val -> val
primitive !sequential val val -> val
primitive !ternarysequential val val val -> val
primitive !random val -> val
primitive !store ref val -> val
primitive !preincrement ref -> val
primitive !postincrement ref -> val
primitive !predecrement ref -> val
primitive !postdecrement ref -> val
primitive !setbit ref val -> void
primitive !clearbit ref val -> void
primitive !push val -> void
primitive !pull ref -> void
primitive !lookup val val -> val
primitive !lookupbyte val val -> val
primitive !propertyarray val val val -> val
primitive !propertylength val val val -> val
primitive !propertyexists val val val -> val
primitive !propertyvalue val val val -> val
primitive !move val val -> void
primitive !remove val -> void
primitive !child val -> val
primitive !children val -> val
primitive !sibling val -> val
primitive !parent val -> val
primitive !metaclass val -> val
primitive !not val -> val
primitive !and val val -> val
primitive !or val val -> val
primitive !eq val val -> val
primitive !ne val val -> val
primitive !gt val val -> val
primitive !ge val val -> val
primitive !lt val val -> val
primitive !le val val -> val
primitive !ofclass val val -> val
primitive !in val val -> val
primitive !notin val val -> val
primitive !alternative val val -> val
primitive !enableprinting void -> void
primitive !font val -> void
primitive !style val -> void
primitive !print val -> void
primitive !printnl void -> void
primitive !printchar val -> void
primitive !printobj val -> void
primitive !printnumber val -> void
primitive !printdword val -> void
primitive !printstring val -> void
primitive !box val -> void
primitive !spaces val -> void
primitive !if val code -> void
primitive !ifdebug code -> void
primitive !ifstrict code -> void
primitive !ifelse val code code -> void
primitive !while val code -> void
primitive !do val code -> void
primitive !for val val val code -> void
primitive !objectloop ref val val code -> void
primitive !objectloopx ref val code -> void
primitive !break void -> void
primitive !continue void -> void
primitive !switch val code -> void
primitive !case val code -> void
primitive !alternativecase val val -> val
primitive !default code -> void
primitive !return val -> void
primitive !jump lab -> void
primitive !quit void -> void
primitive !restore lab -> void
primitive !indirect0v val -> void
primitive !indirect1v val val -> void
primitive !indirect2v val val val -> void
primitive !indirect3v val val val val -> void
primitive !indirect4v val val val val val -> void
primitive !indirect5v val val val val val val -> void
primitive !indirect6v val val val val val val val -> void
primitive !indirect0 val -> val
primitive !indirect1 val val -> val
primitive !indirect2 val val val -> val
primitive !indirect3 val val val val -> val
primitive !indirect4 val val val val val -> val
primitive !indirect5 val val val val val val -> val
primitive !indirect6 val val val val val val val -> val
primitive !message0 val val -> val
primitive !message1 val val val -> val
primitive !message2 val val val val -> val
primitive !message3 val val val val val -> val
primitive !externalcall val val -> val
package main _plain
	package architectural _linkage
		constant CHARSIZE = 1
		constant WORDSIZE = 2
		constant NULL = 0xffff
		constant WORD_HIGHBIT = 0x8000
		constant WORD_NEXTTOHIGHBIT = 0x4000
		constant IMPROBABLE_VALUE = 0x7fe3
		constant MAX_POSITIVE_NUMBER = 32767
		constant MIN_NEGATIVE_NUMBER = -32768
		constant TARGET_ZCODE = 1
		constant DEBUG = 1
